" Author: Traian Nedelea <tron1point0@gmail.com>
"
" vimrc - vim configuration settings

" {{{ --- Make vim use sane paths for things ---
set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after
set packpath^=$XDG_CONFIG_HOME/vim
" }}}
" {{{ --- Custom Bindings ---

let mapleader = " "
let maplocalleader = " "
nnoremap <silent> <leader>      <cmd>WhichKey '<Space>'<CR>
nnoremap <silent> g             <cmd>WhichKey 'g'<CR>
nnoremap <silent> [             <cmd>WhichKey '['<CR>
nnoremap <silent> ]             <cmd>WhichKey ']'<CR>
vnoremap <silent> <leader>      <cmd>WhichKeyVisual '<Space>'<CR>
vnoremap <silent> g             <cmd>WhichKeyVisual 'g'<CR>
vnoremap <silent> [             <cmd>WhichKeyVisual '['<CR>
vnoremap <silent> ]             <cmd>WhichKeyVisual ']'<CR>

set timeoutlen=300  " Reduce the timeout for which_key to match astrovim
" Delay loading the which_key mapping until after vim has finished loading
autocmd! VimEnter * call which_key#register('<Space>', 'g:which_key')
let g:which_key = {}

set mouse=a                 " Enable mouse bindings in all modes
set pastetoggle=<F3>
" Clear search highlight
nmap    <silent> /<BS>      <Cmd>nohlsearch<CR>

" Clear quickfix list with ,l
nnoremap <leader>l <Cmd>call setqflist([])<CR><Cmd>ccl<CR>
let g:which_key.l = 'Clear quickfix list'

nnoremap <leader>c <cmd>bd<CR>
let g:which_key.c = 'Close buffer'
nnoremap <leader>h <cmd>nohlsearch<CR>
let g:which_key.h = 'No highlight'
nnoremap <leader>q <cmd>q<CR>
let g:which_key.q = 'Quit'
nnoremap <leader>w <cmd>w<CR>
let g:which_key.w = 'Save'

" Reselect text indented with > and < so it can repeat
vnoremap > >gv
vnoremap < <gv
" Some emacs-like bindings in insert mode
inoremap <M-Backspace>  <C-w>
inoremap <M-Left>       <C-Left>
inoremap <M-Right>      <C-Right>
" Same, but for command mode
cnoremap <M-Backspace>  <C-w>
cnoremap <M-Left>       <C-Left>
cnoremap <M-Right>      <C-Right>
" Move between splits with M-Arrows
nnoremap <M-Left>       <C-w>h
nnoremap <M-Down>       <C-w>j
nnoremap <M-Up>         <C-w>k
nnoremap <M-Right>      <C-w>l
" For buffer navigation
set hidden          " Allow leaving edited buffer without writing it
noremap <M-]> <Cmd>bn<CR>
noremap <M-[> <Cmd>bp<CR>
noremap <M-w> <Cmd>bd<CR>
" For buffer navigation on OSX - these are the same as the M- bindings above
noremap ‘ <Cmd>bn<CR>
noremap “ <Cmd>bp<CR>
noremap ∑ <Cmd>bd<CR>

" Bind the typos
command! Q q
command! W w
command! WQ wq

" --- END Custom Bindings --- }}}
" {{{ --- Indentation ---

set autoindent          " Copy indent from last line when starting new line
set smartindent         " Try to indent appropriately when starting new line
set preserveindent      " Keep existing indent chars as much as possible
set tabstop=4           " Number of spaces per tab character
set shiftwidth=0        " So that it uses `tabstop` value
set expandtab           " Insert spaces instead of tabs by default

" --- END Indentation --- }}}
" {{{ --- Appearance ---

" Text display
set background=dark     " Assume a dark background
set colorcolumn=+0,+40  " 80 and 120 character gutters (based on textwidth)
if has('termguicolors') && $TERM=~"256color"
    if $TERM=~"xterm" || $TERM=~"tmux"
        let g:one_allow_italics = 1
    endif
    set termguicolors
    colorscheme one     " Colorscheme only really works with truecolor
else
    colorscheme habamax " Not sure if this is available everywhere
endif

set number              " Enable line numbering
" set relativenumber      " Number lines by offset from cursor line
set showmatch           " Highlight matching brackets
set linebreak           " Wrap long lines at word boundaries
set showbreak=↵
set list                " Show non-printing characters
set listchars=tab:——⇥
set listchars+=trail:•
set listchars+=precedes:❮
set listchars+=extends:❯
set listchars+=nbsp:…
set listchars+=conceal:⁞
set spell               " Enable spell checking

" Window size
set equalalways         " Try to keep windows the same size
set textwidth=79        " Automatically break lines in insert mode
set winminwidth=10      " Minimum width of a window
set nowrap              " Don't force wrap lines

" Status line
" Don't re-define the statusline if airline exists
if !exists('g:airline_symbols')
    set statusline=%(%w%q[%n]\ %)%f\ %([%M%R%H]%)\ %=%y[%p%%\ %l/%L:%c]
endif
set showcmd
set cursorline

" --- END Appearance --- }}}
"{{{ --- Autocompletion ---

" Tab completion in command mode
set wildmode=full   " Complete the next full match (and show the menu)
set wildchar=<Tab>  " Use <tab> to trigger completion
set wildignore+=__pycache__,*.pyc,*~

" Set completeopt to have a better completion experience
set completeopt=menuone,noinsert,noselect
" Avoid showing message extra message when using completion
set shortmess+=c

" --- END Autocompletion }}}
" {{{ --- Random Settings ---

" Code folding - default by markers
" Different filetypes get their own foldmethods if needed
set foldmethod=marker

" Searching
set ignorecase      " Case-insensitive searching with /
set smartcase       " But make it case-sensitive if upcase chars exist
set hlsearch        " Highlight search results

" Splitting
set splitright      " Put the new pane to the right for vsplits
set splitbelow      " Put the new pane below for hsplits
set diffopt=filler,vertical

" Backup
set nobackup

" Other
set scrolloff=5         " Keep at least 5 lines visible above/below cursor
set sidescrolloff=5     " Keep at least 5 chars visible left/right of cursor
set modeline            " Check lines in every file for vim commands
set modelines=5         " Check this many lines at the top and bottom
set vb                  " Use visual bell instead of beeping
set clipboard=unnamed   " System clipboard integration

" }}}

" --- Plugins --

" {{{ --- Ctrl-P ---

" Start search from CWD or the nearest ancestor that contains a `.git`, etc.
let g:ctrlp_working_path_mode = 'wa'
let g:which_key.f = { 'name':'+Files' }
nnoremap <leader>ff <cmd>CtrlP<CR>
let g:which_key.f.f = 'Find files'
nnoremap <leader>fb <cmd>CtrlPBuffer<CR>
let g:which_key.f.b = 'Find buffers'
nnoremap <leader>fo <cmd>CtrlPMRU<CR>
let g:which_key.f.o = 'Find recent files'
nnoremap <leader>fm <cmd>CtrlPMixed<CR>
let g:which_key.f.m = 'Find anything'

" }}}
" {{{ --- NERDTree ---

" Keybinds
nnoremap <leader>o <Cmd>NERDTreeFocus<CR>
let g:which_key.o = 'Focus explorer'
nnoremap <leader>e <Cmd>NERDTreeToggle<CR>
let g:which_key.e = 'Toggle explorer'

" Don't show files that match the `wildignore` setting in NERDTree
let g:NERDTreeRespectWildIgnore = 1

" }}}
" {{{ --- Airline ---

let g:airline_theme='one'

" Use powerline symbols in GUI
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.colnr = ':'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.paste = 'ρ'

" Skip displaying standard values
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
let g:airline_skip_empty_sections = 1

" Enable bufferline if we have more than one buffer
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_min_count = 2
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

" }}}
" {{{ --- signifiy ---

set updatetime=250
let g:signify_sign_show_count = 1

let g:which_key.g = { 'name': '+Git' }
" Show diff of whole file
nnoremap <leader>gd <Cmd>SignifyDiff<CR>
let g:which_key.g.d = 'View git diff'
" Fold file to show only changed hunks
nnoremap <leader>gf <Cmd>SignifyFold<CR>
let g:which_key.g.f = 'Fold changes'
" Show changes in hunk under cursor
nnoremap <leader>gh <Cmd>SignifyHunkDiff<CR>
let g:which_key.g.h = 'Show hunk diff'
" Undo hunk under cursor (reset to HEAD)
nnoremap <leader>gu <Cmd>SignifyHunkUndo<CR>
let g:which_key.g.u = 'Undo this hunk'
" Jump to next/previous hunk
nmap <leader>gn <plug>(signify-next-hunk)
let g:which_key.g.n = 'Go to next hunk'
nmap <leader>gp <plug>(signify-prev-hunk)
let g:which_key.g.p = 'Go to previous hunk'
" Same, but like unimpaired
nmap ]c <plug>(signify-next-hunk)
nmap [c <plug>(signify-prev-hunk)

" }}}
" {{{ --- Schlepp ---

" Move lines up and down
nnoremap <S-M-Down>   <Cmd>m +<CR>
nnoremap <S-M-Up>     <Cmd>m -2<CR>

" Move whole blocks around
vmap <S-M-Left>     <Plug>SchleppLeft
vmap <S-M-Down>     <Plug>SchleppDown
vmap <S-M-Up>       <Plug>SchleppUp
vmap <S-M-Right>    <Plug>SchleppRight
vmap D              <Plug>SchleppDup

" }}}

" --- END Plugins ---

" vim: set ft=vim:
