" Author: Traian Nedelea <tron1point0@gmail.com>
"
" vimrc - vim configuration settings

" -- Variables --
set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after
set packpath^=$XDG_CONFIG_HOME/vim

" -- Functionality --

" Indentation
set autoindent
set smartindent
set preserveindent
set tabstop=4
set shiftwidth=0  " So that it uses `tabstop` value
set expandtab
filetype indent on
filetype plugin on

" Code folding
set foldcolumn=0
set foldmethod=indent
set foldlevel=100

" Searching
set ignorecase
set smartcase
set hlsearch
set incsearch

" Key mappings
let mapleader = ","     " Bind comma to <leader>
set mouse=a             " Enable mouse bindings in all modes
set pastetoggle=<F3>
" Clear search highlight
nmap    <silent> /<BS>      :nohlsearch<CR>
" Reselect text indented with > and < so it can repeat
vnoremap > >gv
vnoremap < <gv
" Some emacs-like bindings
inoremap <M-Backspace>  <C-w>
inoremap <M-Left>       <C-o>b
inoremap <M-Right>      <C-o>w
nnoremap <M-Left>       b
nnoremap <M-Right>      w
" For buffer navigation
set hidden          " Allow leaving edited buffer without writing it
noremap <M-]> :bn<CR>
noremap <M-[> :bp<CR>
noremap <M-w> :bd<CR>
" For buffer navigation on OSX - these are the same as the M- bindings above
if has('mac')
    noremap ‘ :bn<CR>
    noremap “ :bp<CR>
    noremap ∑ :bd<CR>
endif

" Splitting
set splitright
set splitbelow
set diffopt=filler,vertical

" Backup
set nobackup

" Other
set scrolloff=5
set backspace=indent,eol,start
set modeline
set modelines=5

" Wild menu (tab completion)
set wildmenu
set wildmode=full
set wildchar=<Tab>

" -- Appearance --

" Text display
set background=dark
if $TERM=~"256color" || $TERM=~"true-color"
    let g:one_allow_italics = 1
    colorscheme one
    set termguicolors
    " 80-character gutter
    set colorcolumn=+1
    highlight ColorColumn guibg=#2D2D2D
endif

syntax on
set number
"set relativenumber
set showmatch
set linebreak
set showbreak=↵
set list
set listchars=tab:⎯⎯⇥
set listchars+=trail:•
set listchars+=precedes:❮
set listchars+=extends:❯
set listchars+=nbsp:…
set listchars+=conceal:⁞
set spell
set display=lastline

" Window size
set equalalways
set textwidth=79
set winminwidth=10
set nowrap

" Status line
" Don't re-define the statusline if airline exists
if !exists('g:airline_symbols')
    set laststatus=2
    set statusline=%(%w%q[%n]\ %)%f\ %([%M%R%H]%)\ %=%y[%p%%\ %l/%L:%c]
endif
set showcmd
set noruler
set cursorline

" Whole window
set vb t_vb=

" System clipboard integration
set clipboard=unnamed

" -- Plugins --


" For Ctrl-P
let g:ctrlp_working_path_mode = 'wa'


" For tag browsing
command! MakeTags !ctags -R .


" For File browser
let g:netrw_browse_split=4  " Open in last window
let g:netrw_liststyle=3     " Tree
let g:netrw_altv=1          " Open splits to the right
let g:netrw_sizestyle="H"   " Human-readable, base 1024
let g:netrw_winsize=25      " 25%
let g:netrw_wiw=16          " Minimum width
let g:netrw_hide=1          " Show only non-hidden
let g:netrw_special_syntax=1 "Highlight special files


" For NERDTree
nnoremap <leader>nn :NERDTreeFocus<CR>
nnoremap <leader>nt :NERDTreeToggle<CR>
nnoremap <leader>nc :NERDTreeFind<CR>


" For Airline
let g:airline_theme='one'

" Use powerline symbols in GUI
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.dirty='⚡'

" Same for the tabline
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#tabline#right_sep = ''
let g:airline#extensions#tabline#right_alt_sep = ''

" Skip displaying standard values
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
let g:airline_skip_empty_sections = 1

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_min_count = 2
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'


" For signifiy
set updatetime=250
let g:signify_sign_show_count = 1
" Show diff of whole file
nnoremap <leader>sd :SignifyDiff<CR>
" Fold file to show only changed hunks
nnoremap <leader>sf :SignifyFold<CR>
" Show changes in hunk under cursor
nnoremap <leader>sh :SignifyHunkDiff<CR>
" Undo hunk under cursor (reset to HEAD)
nnoremap <leader>su :SignifyHunkUndo<CR>
" Jump to next/previous hunk
nmap <leader>sn <plug>(signify-next-hunk)
nmap <leader>sp <plug>(signify-previous-hunk)


" For Schlepp
nnoremap <S-A-Up>     :m -2<CR>
nnoremap <S-A-Down>   :m +<CR>

vmap <S-A-Up>        <Plug>SchleppUp
vmap <S-A-Down>      <Plug>SchleppDown
vmap <S-A-Left>      <Plug>SchleppLeft
vmap <S-A-Right>     <Plug>SchleppRight
vmap D               <Plug>SchleppDup

