local wezterm = require 'wezterm'
local act = wezterm.action

-- {{{ UI Colorschemes

local ui_colors = {
  ["OneDark"] = {
    -- https://raw.githubusercontent.com/joshdick/onedark.vim/master/img/color_reference.png
    black = '#000000',
    dark = '#282c34',
    middark = '#565f70',
    midgrey = '#6a758b',
    midlight = '#969eaf',
    light = '#abb2bf',
    white = '#ffffff',
    red = '#e06875',
    green = '#98c379',
    yellow = '#e5c07b',
    blue = '#61afef',
    magenta = '#c678dd',
    cyan = '#56b6c2',
    -- Generated by going from `light` to `dark` with https://leonardocolor.io/scales.html
    grey7 = '#282c34',
    grey6 = '#404753',
    grey5 = '#565f70',
    grey4 = '#6a758b',
    grey3 = '#808a9e',
    grey2 = '#969eaf',
    grey1 = '#abb2bf',
  },
  ["Dark+"] = {
    black = '#1e1e1e',
    dark = '#424141',
    middark = '#616160',
    midgrey = '#7e7e7e',
    midlight = '#999998',
    light = '#cccccc',
    white = '#e5e5e5',
    red = '#c62f37',
    green = '#37be78',
    yellow = '#e2e822',
    blue = '#396ec7',
    magenta = '#b835bc',
    cyan = '#3ba7cc',
    -- Generated by going from `light` to `dark` with https://leonardocolor.io/scales.html
    grey7 = "#1e1e1e",
    grey6 = "#424141",
    grey5 = "#616160",
    grey4 = "#7e7e7e",
    grey3 = "#999998",
    grey2 = "#b3b2b3",
    grey1 = "#cccccc",
  },
  ["Tmux Clone"] = {
    black = '#000000',
    dark = '#262626',
    middark = '#444444',
    midgrey = '#7e7e7e',
    midlight = '#585858',
    light = '#e5e5e5',
    green = '#5fd787',
    yellow = '#f9ab00',
    blue = '#0087ff',
  }
}

-- }}}

local palette = ui_colors["Tmux Clone"]

local config = {
  -- Options
  hide_tab_bar_if_only_one_tab = true,
  use_fancy_tab_bar = false,
  tab_bar_at_bottom = true,
  tab_max_width = 24,
  colors = {
    tab_bar = {
      background = palette.dark,
      active_tab = {
        fg_color = palette.light,
        bg_color = palette.black,
      },
      inactive_tab = {
        fg_color = palette.midlight,
        bg_color = palette.dark,
      },
      new_tab = {
        fg_color = palette.midlight,
        bg_color = palette.dark,
      },
    },
  },
  window_frame = {
    active_titlebar_bg = palette.dark,
    inactive_titlebar_bg = palette.dark,
  },

  use_resize_increments = true,
  window_background_opacity = 0.9,
  cursor_thickness = '0.1cell',
  visual_bell = {
    fade_in_function = 'EaseIn',
    fade_in_duration_ms = 75,
    fade_out_function = 'EaseOut',
    fade_out_duration_ms = 75,
  },
  window_padding = {
    top = 0,
    right = 0,
    bottom = 0,
    left = 0,
  },

  -- Fonts
  font = wezterm.font_with_fallback {
    'JetBrainsMono Nerd Font',
    'FiraCode Nerd Font',
    'Fira Code',
    'Liberation Mono',
    'Menlo'
  },
  font_size = 14.0,

  -- Colors
  color_scheme = "Dark+",

  keys = {
    -- Switch tabs with Cmd-[]
    { key = '[', mods = 'CMD', action = act.ActivateTabRelative(-1) },
    { key = ']', mods = 'CMD', action = act.ActivateTabRelative(1) },
    -- Split panes
    { key = 'h', mods = 'CMD|SHIFT', action = wezterm.action.SplitPane { direction = 'Down' } },
    { key = 'v', mods = 'CMD|SHIFT', action = wezterm.action.SplitPane { direction = 'Right' } },
    -- For Linux hosts
    { key = ',', mods = 'CMD', action = wezterm.action.SplitPane { direction = 'Down' } },
    { key = "'", mods = 'CMD', action = wezterm.action.SplitPane { direction = 'Right' } },
  },
}

-- Per-host overrides
local overrides = {
  hadar = function()
    config.font_size = 12.0
    config.freetype_load_target = "HorizontalLcd"
    config.freetype_render_target = "HorizontalLcd"
  end,
}

-- {{{ Apply per-host overrides

local hostname = wezterm.hostname()
for host, fn in pairs(overrides) do
  if hostname == host then
    fn()
    break
  end
end

-- }}}

-- {{{ Statusbar contents and colors

local username = (function()
  local _, value, _ = wezterm.run_child_process { 'whoami' }
  return value:gsub("%s", "")
end)()

local left_border = wezterm.nerdfonts.ple_lower_left_triangle
local right_border = wezterm.nerdfonts.ple_lower_right_triangle
if not config.tab_bar_at_bottom then
  left_border = wezterm.nerdfonts.ple_upper_left_triangle
  right_border = wezterm.nerdfonts.ple_upper_right_triangle
end

wezterm.on('update-status', function(window, pane)
  local time = wezterm.strftime '%H:%M'

  local offset = config.tab_and_split_indices_are_zero_based and 0 or 1
  local tab_index = 0
  for _, t in pairs(window:mux_window():tabs_with_info()) do
    if t.is_active then
      tab_index = t.index + offset
      break
    end
  end

  local pane_index = 0
  for _, p in pairs(pane:tab():panes_with_info()) do
    if p.is_active then
      pane_index = p.index + offset
      break
    end
  end

  window:set_left_status(wezterm.format {
    { Foreground = { Color = palette.dark } },
    { Background = { Color = palette.green } },
    { Text = ' ' .. window:window_id() .. ':' .. tab_index .. '.' .. pane_index .. ' ' },
    'ResetAttributes',
    { Foreground = { Color = palette.green } },
    { Text = left_border }
  })

  window:set_right_status(wezterm.format {
    'ResetAttributes',
    { Foreground = { Color = palette.middark } },
    { Text = right_border },
    { Foreground = { Color = palette.light } },
    { Background = { Color = palette.middark } },
    { Text = ' ' .. username },
    { Foreground = { Color = palette.midgrey } },
    { Text = '@' },
    { Foreground = { Color = palette.light } },
    { Text = hostname .. ' ' },
    { Foreground = { Color = palette.blue } },
    { Text = right_border },
    { Foreground = { Color = palette.light } },
    { Background = { Color = palette.blue } },
    { Text = ' ' .. time .. ' ' },
  })
end)

wezterm.on('format-tab-title', function(tab, _, _, _, _, max_width)
  local tab_offset = config.tab_and_split_indices_are_zero_based and 0 or 1
  local tab_index = (tab.tab_index + tab_offset) .. ''

  local tab_left_border = left_border
  local tab_right_border = right_border
  if config.use_fancy_tab_bar then
    tab_left_border = ' '
    tab_right_border = ' '
  end
  -- These must be the same lengths as `tab_left_border`
  local tab_left_no_border = ' '
  local tab_right_no_border = ' '

  local tab_left_padding = ' '
  local tab_right_padding = ' '

  -- if cfg.show_tab_index_in_tab_bar then
  --   -- TODO
  -- end

  local title = tab.active_pane.title
  if not config.use_fancy_tab_bar then
    local width_offset = 0
    for _, s in ipairs({
      tab_left_no_border,
      tab_left_padding,
      tab_index,
      '*',
      tab_right_padding,
      tab_right_no_border,
    }) do
      width_offset = width_offset + s:len()
    end
    title = wezterm.truncate_right(title, max_width - width_offset)
  end

  if tab.is_active then
    return {
      { Foreground = { Color = palette.dark } },
      { Text = tab_left_border },
      { Text = tab_left_padding },
      { Foreground = { Color = palette.midlight } },
      { Text = tab_index },
      { Foreground = { Color = palette.yellow } },
      { Text = '*' },
      'ResetAttributes',
      { Text = title },
      { Text = tab_right_padding },
      { Foreground = { Color = palette.dark } },
      { Text = tab_right_border },
    }
  end

  if tab.active_pane.has_unseen_output then
    return {
      { Text = tab_left_no_border },
      { Text = tab_left_padding },
      { Text = tab_index },
      { Foreground = { Color = palette.yellow } },
      { Text = '#' },
      'ResetAttributes',
      { Text = title },
      { Text = tab_right_padding },
      { Text = tab_right_no_border },
    }
  end

  -- TODO: Handle last active tab

  return {
    { Text = tab_left_no_border },
    { Text = tab_left_padding },
    { Text = tab_index },
    { Text = '.' },
    { Text = title },
    { Text = tab_right_padding },
    { Text = tab_right_no_border },
  }
end)
-- }}}

return config
